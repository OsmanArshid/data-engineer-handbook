--                                                              DATA MODELLING LAB 1

-- Making a master data table by the help of 
-- "cumulative table" technique

-- Steps:
-- 1. Make 2 tables (yesterday and today)
-- 2. COALESCE them
-- 3. FULL OUTER JOIN THEM

-- SELECT * 
-- FROM player_seasons;

SELECT *
FROM players;

-- we are making the type on just the attributes that change and also we kinda understand
-- this is a data type of its own
-- CREATE TYPE season_stats AS (
-- 			season INTEGER,
-- 			gp INTEGER,
-- 			pts REAL,
-- 			reb REAL,
-- 			ast REAL
-- );

-- seperating the values that will stay the same and combining the season stats struct as an array
-- CREATE TABLE players( 
-- 		player_name TEXT, 
-- 		height TEXT, 
-- 		college TEXT, 
-- 		country TEXT, 
-- 		draft_year TEXT, 
-- 		draft_round TEXT,
--      draft_number TEXT,
--      season_stats season_stats[],
--      current_season INTEGER,
--      PRIMARY KEY (player_name, current_season)
-- );

-- checking which year to start from, for the Master table
-- SELECT MIN(season) 
-- FROM player_seasons;

-- WITH 
-- 	yesterday AS (
-- 	SELECT * from players
-- 	WHERE current_season = 1995
-- 	),

-- 	today AS (
-- 	SELECT * FROM player_seasons
-- 	WHERE season = 1996
-- 	)

-- SELECT
-- 	COALESCE (t.player_name, y.player_name) AS player_name,
-- 	COALESCE (t.height, y.height) AS height,
-- 	COALESCE (t.college, y.college) AS college,
-- 	COALESCE (t.country, y.country) AS country,
-- 	COALESCE (t.draft_year, y.draft_year) AS draft_year,
-- 	COALESCE (t.draft_round, y.draft_round) AS draft_round,
-- 	COALESCE (t.draft_number, y.draft_number) AS draft_number,

-- 	CASE 
-- 		WHEN y.season_stats IS NULL
-- 		THEN ARRAY[ROW(
-- 				t.season,
-- 				t.gp,
-- 				t.pts,
-- 				t.reb,
-- 				t.ast
-- 		)::season_stats]


-- 		WHEN t.season IS NOT NULL
-- 		THEN y.season_stats || ARRAY[ROW(
-- 				t.season,
-- 				t.gp,
-- 				t.pts,
-- 				t.reb,
-- 				t.ast
-- 		)::season_stats]

-- 		ELSE y.season_stats
-- 	END
-- 		as season_stats,

-- there is another case where we wanna do a simple
-- thing and +1 the current_season in yesterday

	-- CASE
		-- 	WHEN t.season IS NOT NULL 
		-- 	THEN t.season
	
		-- 	ELSE y.current_season + 1
		-- END 
	-- 	as	

-- a better way to do this sam eabove case is COALESCE
-- 	COALESCE (t.season, y.current_season + 1) as current_season
  
-- FROM today t FULL OUTER JOIN yesterday y
-- ON t.player_name = y.player_name
